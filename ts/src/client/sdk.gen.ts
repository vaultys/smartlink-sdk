// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { GetAppByClientIdData, GetAppByClientIdError, GetAppByClientIdResponse, PutAppByClientIdData, PutAppByClientIdError, PutAppByClientIdResponse, DeleteAppByClientIdData, DeleteAppByClientIdError, DeleteAppByClientIdResponse, PostAppData, PostAppError, PostAppResponse, GetAppsError, GetAppsResponse, PostAppsData, PostAppsError, PostAppsResponse, GetEventsData, GetEventsError, GetEventsResponse, GetFolderByIdData, GetFolderByIdError, GetFolderByIdResponse, DeleteFolderByIdData, DeleteFolderByIdError, DeleteFolderByIdResponse, PostFolderData, PostFolderError, PostFolderResponse, GetFoldersError, GetFoldersResponse, PostMembershipByIdDeactivateData, PostMembershipByIdDeactivateError, PostMembershipByIdDeactivateResponse, GetMembershipByIdData, GetMembershipByIdError, GetMembershipByIdResponse, PutMembershipByIdData, PutMembershipByIdError, PutMembershipByIdResponse, DeleteMembershipByIdData, DeleteMembershipByIdError, DeleteMembershipByIdResponse, PostMembershipData, PostMembershipError, PostMembershipResponse, GetMembershipsError, GetMembershipsResponse, PostMembershipsData, PostMembershipsError, PostMembershipsResponse, GetMembershipsSearchData, GetMembershipsSearchError, GetMembershipsSearchResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get an app by client ID
 * Fetches an app by its client ID.
 */
export const getAppByClientId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetAppByClientIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAppByClientIdResponse, GetAppByClientIdError, ThrowOnError>({
        ...options,
        url: '/app/{clientId}'
    });
};

/**
 * Update an app by client ID
 * Updates an app by its client ID.
 */
export const putAppByClientId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutAppByClientIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutAppByClientIdResponse, PutAppByClientIdError, ThrowOnError>({
        ...options,
        url: '/app/{clientId}'
    });
};

/**
 * Delete an app by client ID
 * Deletes an app by its client ID.
 */
export const deleteAppByClientId = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteAppByClientIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteAppByClientIdResponse, DeleteAppByClientIdError, ThrowOnError>({
        ...options,
        url: '/app/{clientId}'
    });
};

/**
 * Create a new app
 * Create a new app for your organization
 */
export const postApp = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostAppData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAppResponse, PostAppError, ThrowOnError>({
        ...options,
        url: '/app'
    });
};

/**
 * Get all apps
 * Get all apps of your organization
 */
export const getApps = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAppsResponse, GetAppsError, ThrowOnError>({
        ...options,
        url: '/apps'
    });
};

/**
 * Create multiple apps
 * Create multiple apps for your organization
 */
export const postApps = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostAppsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostAppsResponse, PostAppsError, ThrowOnError>({
        ...options,
        url: '/apps'
    });
};

/**
 * Get log events
 * Retrieve log events with various filters
 */
export const getEvents = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<GetEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventsResponse, GetEventsError, ThrowOnError>({
        ...options,
        url: '/events'
    });
};

/**
 * Get a folder by ID
 * Fetches a folder by its ID.
 */
export const getFolderById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFolderByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFolderByIdResponse, GetFolderByIdError, ThrowOnError>({
        ...options,
        url: '/folder/{id}'
    });
};

/**
 * Delete a folder by ID
 * Deletes a folder resource identified by the given ID.
 */
export const deleteFolderById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteFolderByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteFolderByIdResponse, DeleteFolderByIdError, ThrowOnError>({
        ...options,
        url: '/folder/{id}'
    });
};

/**
 * Create a new folder
 * Create a new folder within your organization
 */
export const postFolder = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostFolderData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostFolderResponse, PostFolderError, ThrowOnError>({
        ...options,
        url: '/folder'
    });
};

/**
 * Get all folders
 * Get all folders of your organization
 */
export const getFolders = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFoldersResponse, GetFoldersError, ThrowOnError>({
        ...options,
        url: '/folders'
    });
};

/**
 * Deactivate a membership by ID
 * Updates a membership's status to "INACTIVE" by its ID.
 */
export const postMembershipByIdDeactivate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostMembershipByIdDeactivateData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMembershipByIdDeactivateResponse, PostMembershipByIdDeactivateError, ThrowOnError>({
        ...options,
        url: '/membership/{id}/deactivate'
    });
};

/**
 * Get a membership by ID
 * Fetches a membership by its ID.
 */
export const getMembershipById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMembershipByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMembershipByIdResponse, GetMembershipByIdError, ThrowOnError>({
        ...options,
        url: '/membership/{id}'
    });
};

/**
 * Update a membership by ID
 * Updates a membership by its ID.
 */
export const putMembershipById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutMembershipByIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutMembershipByIdResponse, PutMembershipByIdError, ThrowOnError>({
        ...options,
        url: '/membership/{id}'
    });
};

/**
 * Delete a membership by ID
 * Deletes a membership resource identified by the given ID.
 */
export const deleteMembershipById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteMembershipByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteMembershipByIdResponse, DeleteMembershipByIdError, ThrowOnError>({
        ...options,
        url: '/membership/{id}'
    });
};

/**
 * Create a new membership
 * Create a new membership for your organization
 */
export const postMembership = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostMembershipData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMembershipResponse, PostMembershipError, ThrowOnError>({
        ...options,
        url: '/membership'
    });
};

/**
 * Get all memberships
 * Get all memberships of your organization
 */
export const getMemberships = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMembershipsResponse, GetMembershipsError, ThrowOnError>({
        ...options,
        url: '/memberships'
    });
};

/**
 * Create multiple memberships
 * Create multiple memberships for your organization
 */
export const postMemberships = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostMembershipsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostMembershipsResponse, PostMembershipsError, ThrowOnError>({
        ...options,
        url: '/memberships'
    });
};

/**
 * Search memberships
 * Search memberships with various filters
 */
export const getMembershipsSearch = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetMembershipsSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMembershipsSearchResponse, GetMembershipsSearchError, ThrowOnError>({
        ...options,
        url: '/memberships/search'
    });
};